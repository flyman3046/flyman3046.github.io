---
layout: default
title:  "Codeforces笔记"
date:   2018-08-19 10:30:00
categories: main
---

新开一个blog，记录一下codeforces的刷题情况，主要用来总结一些解题经验。

Edu 54，做了4/7。题目挺好的，在第二题上花了比较多的时间，是个挺好的数学题，需要发现点规律。第四题是个图的题，提交的时候不是完全确定对不对，不过还是AC了。第五题之前没遇到过，考察的点挺多的，是个不错的题目，应该对这类题目多总结一下，看看还有没有其他的类似的。尽量把第六题补充上来。

Mail.Ru Cup，做了2/7。这次的题目比较难，第二题刚开始思路不对，想太复杂了。第三题就开始不会了，想了挺长时间也没找到规律，是个数学题，基本上属于如果不会差不多就是不会想出来的那种。第三题是个完全的数学题，需要找到两个点怎么才能离的最近。两个点可以通过加减gcd(t1, t2)来让距离最近，比赛的时候离这个结论比较接近了，但是当时没找到这个结论。

Level 5 final，做了3/6。第一题比较直观，第二题是binary search，第三题也是binary search，但是需要仔细发现规律。第四题是个interactive的题，对这种题没有想法，从来没AC过。看着答案把第四题提交了。第五题是个非常好的题，需要仔细考虑规律。对于n大于四的时候有统一的规律，但是对于n是3的时候，需要考虑选取哪三个点。其中extreme的点不超过8个，最优解一定有至少两个extreme点组成，所以可以用优化过的暴力解就行。第六题也是个好题，需要很大的转化，根本想不到会转换到图，然后用dsu来解决，这个需要仔细琢磨琢磨。

CF519，做了4/7。这次题目相对来说简单一些，第一题和第二题都比较直观，虽然第二题有点绕。第三题花了一些时间在dp解法上，后来发现直接用greedy就可以，也不需要像dp那样保留中间状态。第四题挺不错的，也不用特别繁琐的解法。就是需要快速的查找一个序列中一个数的前一个数是什么，需要用一个额外的数组事先计算一下。第五题没时间做了，需要补充。第五题是个很好的题，类似个图的题目，需要计算所有边的和，但是N^2的复杂度太多，需要找到这么一个规律，就是怎么快速计算某个点的所有权重，我们可以对点进行sort，然后某个点的所有左边可以用presum快速计算，同样也试用于某个点的右边。sort的标准需要很好的理解。

Edu53，做了4/7。前两题都比较简单。第三题是binary search，跟之前的类似，需要很小心各种初始条件，边界条件。还写了一个brute foce解来验证一下答案。第四题是个有个简单的解法，就是在暴力解的基础上稍微优化一下。第五题是个digital dp题，如果不熟练会很繁琐，需要考虑的状态转移很麻烦，但是也是有规律可寻的。这种类型的需要多练习练习。

CF518，只做出来2/6。第一题题意太难理解，不过好在没直接跳过做其他的。第三题用了很长时间找规律。第四题是个dp，时间允许的话应该可以做出来的，所以有机会还是得多训练训练dp，最好一次提交成功。第五题貌似比第四题简单，但是不怎么会tree的题，这次比赛需要好好总结总结。把第四题的补充一下，有个需要特别小心的是，如果要分配很大的多维内存，把小的dimension放在前面会省很多时间。比如这样dp[2][1000]就会比dp[1000][2]快很多。

Mail.ru Round1，只做出来了3/8，并且第三题卡的时间太长，一直没找到好的规律可寻，在没希望的情况下提交了，虽然过了，但是还是很冒险，其实自己并不会。还是可以看看提交情况来判断一下题目难度，大量正确的提交基本就是代表有一些规律还没发现。第四题非常好，花了很长时间也没理清思路，虽然离答案比较接近了，关键步骤还是欠缺，比如presum怎么由改变ai形成。如何改变presum的内容来让匹配的个数最小，这个题目值得仔细考虑考虑。

Level5，做了3/7。前三题算比较正规的题目，第三题是个挺好的递归问题。在第四题上花了很多时间，有很多细节需要考虑清楚。在质数分解上一直卡着，一直在找一个可以快速质数分解的算法，到最后也没找出来。这个题目从开始的出发角度就不对，需要后来补充上去。现在把第四题补充上去，这个需要一个比较好的切入点，归根结底是要求所有质数对应的指数。但是两个很大质数的乘积没办法快速质数分解，这个时候可以利用它跟其他数的gcd，看看会不会是1或者它本身，如果都不是的话，这个gcd就一定是其中的一个质数。

CF514，做了3/5。前三题也算是正常题，第二题implementation比较麻烦，第三题可以很快的bruteforce找到规律，但是中间出现问题，导致bruteforce程序有问题，纠结了很长时间在找规律上，第四题还剩半个小时，仔细分析的话还是可以做出来的，应该要找一个圆心的坐标，一直想着应该怎么固定x轴位置，其实可以固定y轴坐标，然后查找有没有合适的x轴坐标。第四题还会有precision error的问题，也需要注意。

CF512，做了4/7，前三题算比正常简单的题目，第四题出了两个WA，没处理好time limit，想法比较tricky，还是挺灵活的一道题。没来得及做第五题，现在把第五题补上，思路就是怎么找充分必要条件，这个时间需要猜测一下，这题的充分必要是两个：1，subsum bitcount是偶数。2，max <= sum - max。满足条件1的个数比较容易计算，现在可以利用容斥原理计算，cnt(condi1 && condi2) = cnt(condi1) - cnt(cnd1 && !condi2)。选择这个容斥的原因就是会简化计算。

CF511，中国人组织的一次比赛，第一和第二题都比较简单，第三题用的seive nloglogn的解法，但是竟然对n是1.5e7的时候都能通过。主要原因是在计算的时候还确定是不是prime，只对prime的进行计算。如果每个都计算的话，复杂度会是nlogn。第四题是个case analysis的题，暴力解只做出来很少的例子，发现不出来规律。把最小dimen放在n上的想法还是挺好的。正确的check error的方法应该是用graph的matching algorithm，比如hungarian algorithm。所以事先估算一下brute force的复杂度还是很有必要的。

Edu round 51，没来的及参加比赛，线下做出来了4道题，第一题的implementations比正常的复杂，第二题和第三题都比较简单，第四题的dp也算常规，之前出现过类似的tile的题目。还是需要先把大概的题目看一遍，找有思路可以马上提交的来做，不要卡在前面的题目！这次比赛的case analysis比较繁琐，还是挺容易出错的，从大家的提交情况来看也是这样。

[jekyll-gh]: https://github.com/mojombo/jekyll
[jekyll]:    http://jekyllrb.com